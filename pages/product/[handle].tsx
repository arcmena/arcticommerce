import { useCallback, useEffect, useState } from 'react'
import { GetServerSideProps, GetStaticPaths, GetStaticProps } from 'next'
import Head from 'next/head'
import Link from 'next/link'
import cn from 'classnames'

import { shopifyClient } from '@shopify/client'
import { Entities, Page, Product, ProductWithVariants } from '@shopify/schema'
import { productDetailQuery } from '@shopify/queries/productDetailQuery'
import { getProductPrice } from '@shopify/utils/getProductPrice'
import { getPage } from '@shopify/operations/page/getPage'
import { getProductRecommendations } from '@shopify/operations/product/getProductRecommendations'

import Button from '@components/elements/Button'
import { OptionSelector } from '@components/product/OptionSelector'
import ProductGallery from '@components/product/ProductGallery'
import { useCart } from '@components/common/Cart/Context'
import ProductCard from '@components/product/ProductCard'

import s from 'styles/pages/PDP.module.css'
import { productsQuery } from '@shopify/queries/productsQuery'
import { productIndexQuery } from '@shopify/queries/productIndexQuery'

type ProductDetailResultType = {
  productByHandle?: ProductWithVariants
}

type ProductIndexResultType = {
  products?: Entities<Product>
}

export const getStaticPaths: GetStaticPaths = async () => {
  const productsIndex = await shopifyClient.request<ProductIndexResultType>(
    productIndexQuery
  )

  const productPaths = productsIndex.products?.edges.map(product => {
    return {
      params: {
        handle: product.node.handle
      }
    }
  }) as {
    params: {
      handle: string
    }
  }[]

  return {
    paths: productPaths,
    fallback: false
  }
}

export const getStaticProps: GetStaticProps = async props => {
  const { params } = props
  const { handle } = params as { handle: string }

  const { productByHandle } =
    await shopifyClient.request<ProductDetailResultType>(productDetailQuery, {
      handle: handle
    })

  if (!productByHandle) {
    return {
      notFound: true
    }
  }

  const pageData = await getPage(handle)

  const recommendedProducts = await getProductRecommendations(
    productByHandle.id
  )

  return {
    props: {
      productResult: productByHandle,
      pageData: pageData.page,
      recommendedProducts
    }
  }
}

type ProductDetailPageProps = {
  productResult: ProductWithVariants
  pageData: Page
  recommendedProducts?: ProductWithVariants[]
}

const PDP = ({
  productResult,
  pageData,
  recommendedProducts
}: ProductDetailPageProps) => {
  const [isAddingToCart, setIsAddingToCart] = useState(false)

  const { addProductToCart } = useCart()

  const [activeVariant, setActiveVariant] = useState(
    productResult?.variants?.edges[0].node
  )

  useEffect(() => {
    setActiveVariant(productResult?.variants?.edges[0].node)
  }, [productResult])

  const isConfigurableProduct = productResult?.options?.[0].name !== 'Title'

  const isProductInStock = activeVariant!.availableForSale

  const handleAddToCart = async () => {
    const { id } = activeVariant!

    if (!isAddingToCart) {
      if (isProductInStock) {
        setIsAddingToCart(true)

        await addProductToCart(id)

        setIsAddingToCart(false)
      }
    }
  }

  const updateActiveVariant = useCallback(
    (selectedOptions: { name: string; value: string }[]) => {
      const { variants } = productResult

      const newActiveVariant = variants?.edges.find(({ node }) =>
        node.selectedOptions.every(
          ({ name, value }, index) =>
            name === selectedOptions[index].name &&
            value === selectedOptions[index].value
        )
      )?.node

      if (newActiveVariant) {
        setActiveVariant(newActiveVariant)
      }
    },
    [productResult]
  )

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <>
        <div className="md:pr-8 md:pb-[72px]">
          <div className="md:mx-auto md:flex md:justify-center md:relative md:gap-8">
            <div className={cn(s['gallery-container'])}>
              <ProductGallery galleryEntries={productResult.images.edges} />
            </div>
            <div className={cn('px-4 py-8', s['info-container'])}>
              <div className={cn('hidden md:inline', s['breadcrumbs'])}>
                <ul className="flex gap-2 flex-wrap align-baseline pb-3 text-xs capitalize italic">
                  <li className="inline-flex items-center">
                    <Link href="/">Home</Link>
                  </li>
                  <li className="inline-flex items-center">
                    <Link href="/collections/all">Product</Link>
                  </li>
                  <li>{productResult.title}</li>
                </ul>
              </div>

              <div>
                <h1 className="text-black text-[22px] md:text-[28px] text-center md:text-left">
                  {productResult.title}
                </h1>
                <span className="mt-3 text-center md:text-left block text-black text-[13px] md:text-xs uppercase tracking-widest">
                  {productResult.collections?.edges[0]?.node?.title}
                </span>
              </div>
              <div className="flex mt-4 tracking-widest justify-center md:justify-start">
                <span className="text-base">
                  {getProductPrice({ price: activeVariant!.price }).price}
                </span>
                {activeVariant!.compareAtPrice ? (
                  <span className="text-[13px] line-through text-gray-600 h-fit align-bottom pt-[3px] ml-1">
                    {
                      getProductPrice({ price: activeVariant!.compareAtPrice })
                        .price
                    }
                  </span>
                ) : null}
              </div>

              <div className="mt-8">
                {isConfigurableProduct && (
                  <OptionSelector
                    product={productResult}
                    activeVariant={activeVariant!}
                    updateActiveVariant={updateActiveVariant}
                  />
                )}
              </div>

              <div className="mt-8">
                <Button
                  onClick={handleAddToCart}
                  variant={'filled'}
                  className="w-full"
                  disabled={!isProductInStock}
                  loading={isAddingToCart}
                >
                  {isProductInStock ? 'Add to Cart' : 'Out of stock'}
                </Button>
              </div>

              {productResult.descriptionHtml ? (
                <div
                  className={cn('mt-8', s['description-html'])}
                  dangerouslySetInnerHTML={{
                    __html: productResult.descriptionHtml
                  }}
                />
              ) : null}
            </div>
          </div>
        </div>
        <div>
          {pageData?.body ? (
            <div
              className={cn(s['content-html'])}
              dangerouslySetInnerHTML={{
                __html: pageData.body
              }}
            />
          ) : null}
        </div>

        {recommendedProducts ? (
          <div className="bg-[#f7f7f7] py-8 px-4 md:py-[72px] md:px-12">
            <div className=" max-w-[1200px] mx-auto">
              <h2 className="text-[22px] md:text-[28px] text-center">
                You may also like
              </h2>

              {/* Product Grid */}
              <div className="grid grid-cols-2 gap-4 md:mt-8 md:grid-cols-4 md:gap-8">
                {recommendedProducts.map(product => (
                  <ProductCard key={product.id} product={product} />
                ))}
              </div>
            </div>
          </div>
        ) : null}
      </>
    </>
  )
}

export default PDP
